#include <Wire.h>
#include <SPI.h>
#include "ArduCAM.h"
#include "memorysaver.h"

#define CS_PIN 10  // Adjust based on your wiring
ArduCAM myCAM(OV2640, CS_PIN);

void setup() {
  Serial.begin(921600);
  while (!Serial);  // Wait for Serial port to connect (useful for some boards)
  Serial.println("Starting setup...");
  
  Wire.begin();
  SPI.begin();
  pinMode(CS_PIN, OUTPUT);
  digitalWrite(CS_PIN, HIGH);

  // SPI Test to confirm communication
  Serial.println("Running SPI test...");
  myCAM.write_reg(ARDUCHIP_TEST1, 0x55);
  uint8_t test = myCAM.read_reg(ARDUCHIP_TEST1);
  Serial.print("Test register value: 0x");
  Serial.println(test, HEX);
  if (test != 0x55) {
    Serial.println("SPI communication error. Check wiring.");
    while (1);
  }

  // Reset and initialize camera
  Serial.println("Resetting camera...");
  myCAM.write_reg(0x07, 0x80); // Software reset
  delay(75);
  myCAM.write_reg(0x07, 0x00); // Exit reset
  delay(75);

  // Declare and read sensor ID
  uint8_t vid, pid;
  myCAM.wrSensorReg8_8(0xff, 0x01);  // Select sensor register bank
  myCAM.rdSensorReg8_8(0x0A, &vid);
  myCAM.rdSensorReg8_8(0x0B, &pid);
  Serial.print("VID: 0x");
  Serial.println(vid, HEX);
  Serial.print("PID: 0x");
  Serial.println(pid, HEX);
  if ((vid != 0x26) || (pid != 0x42)) {  // Expected values for OV2640
    Serial.println("Camera module ID mismatch. Check your OV2640 module.");
    while (1);
  }

  // Set camera format and initialize
  Serial.println("Setting camera format and resolution...");
  myCAM.set_format(JPEG);
  myCAM.InitCAM();
  myCAM.OV2640_set_JPEG_size(OV2640_320x240);  // Set resolution to 320x240
  delay(250);
  myCAM.clear_fifo_flag();
  Serial.println("Setup complete.");
}

void loop() {
  Serial.println("ðŸ“¸ Capturing image...");
  myCAM.flush_fifo();
  myCAM.clear_fifo_flag();
  myCAM.start_capture();

  // Wait until the capture is done
  while (!(myCAM.read_reg(ARDUCHIP_TRIG) & CAP_DONE_MASK)) {
    delay(10);  // small delay to avoid busy waiting
  }

  uint32_t fifoLength = myCAM.read_fifo_length();
  Serial.print("FIFO length: ");
  Serial.println(fifoLength);
  
  if (fifoLength == 0 || fifoLength > 500000) {
    Serial.println("Error: Invalid image length. Flushing FIFO.");
    myCAM.flush_fifo();
    return;
  }

  // Send start marker to indicate beginning of image data
  Serial.println("---START---");

  // Send image data from FIFO over Serial
  myCAM.CS_LOW();
  for (uint32_t i = 0; i < fifoLength; i++) {
    uint8_t temp = myCAM.read_fifo();
    Serial.write(temp);
  }
  myCAM.CS_HIGH();

  // Send end marker
  Serial.println("---END---");

  delay(50);  // Adjust delay for desired frame rate
}
